<?xml version="1.0" encoding="utf-8" ?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    minWidth="1024" 
    minHeight="768" 
    creationComplete="initApp()"> 
    <fx:Style>
        @namespace "library://ns.adobe.com/flex/spark";
        WindowedApplication 
        {
            skinClass:ClassReference("spark.skins.spark.SparkChromeWindowedApplicationSkin");
        }
        
    </fx:Style>
    <fx:Style>
        @namespace "library://ns.adobe.com/flex/spark";
        DataGrid {
            font-size: 14px;
            font-family: "SimSun";
        }
        #boardTree { border-style: solid}
        #vBoard {padding-left: 0}
    </fx:Style>
          
    <fx:Script>
        <![CDATA[ 
        	import com.airsmth.defines.*;
        	import com.airsmth.renders.*;
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import flash.events.Event;
            import spark.events.GridEvent;
            import mx.controls.Alert;
            //import defines.Thread;
            private var stream:flash.net.URLStream;
            var html:flash.html.HTMLLoader;
            private var acThread:ArrayCollection;
            private var acPost:ArrayCollection;
            private var acBoard:ArrayCollection;
            private var isLoggedIn:Boolean = false;
            private var isFavorUpdated:Boolean = false;
                        
            public function initApp():void 
            { 
                var f:File = new File("app:/config.xml");
                if (!f.exists) {
                    login("guest", "");
                    return;
                }
                var r:FileStream = new FileStream();
                r.open(f, FileMode.READ);
                var config:XML = XML(r.readUTFBytes(r.bytesAvailable));
                r.close();
                login(config.auth.id, config.auth.pass);
                
            } 
            
            public function loadPost():void
            {
            }
            
            public function loadPostCallback():void
            {
            }
            
            public function loadBoardCallback(e:flash.events.Event):void
            {
                var text:String = stream.readMultiByte(stream.bytesAvailable, "gb2312");
                var p:RegExp = new RegExp("c\\.o\\((\\d+),(\\d+),'(.*?)','(.*?)',(\\d+),'(.*?)',(\\d+),\\d+,\\d+\\)", "ig");
                var p2:RegExp = new RegExp("docWriter\\('(.*?)',(\\d+)");
                var result:Object = p.exec(text);
                var result2:Object = p2.exec(text);
                var lines:ArrayCollection = new ArrayCollection();
                
                while (result != null) {
                    var thread:Thread = new Thread();
                    thread.bname = result2[1];
                    thread.bid = result2[2];
                    thread.pid = result[1];
                    thread.gid = result[2];
                    thread.author = result[3];
                    thread.flag = result[4];
                    thread.time = result[5];
                    thread.title = result[6];
                    thread.size = result[7];
                    lines.addItem(thread);
                    result = p.exec(text);
                }
                lines.addItem(new Date().toLocaleTimeString());
                threadList.dataProvider = lines;
            }
            
            public function loadSubjectCallback(e:Event):void
            {
            	var content:String = stream.readMultiByte(stream.bytesAvailable, "gb2312");
            	var p:RegExp = new RegExp("\\[(\\d+),'(.*?)'\\]", "g");
            	var p2:RegExp = new RegExp("tconWriter.*?(\\d+),\\d+,\\d+,(\\d+),(\\d+),\\d+,\\d+,\\d+,'(.*?)'");
            	var result:Object = p.exec(content);
            	var result2:Object = p2.exec(content);
            	if (result == null || result2 == null) 
            	{
            		Alert.show("Error occurred");
            		return;
            	}
            	var bid:String = result2[1];
            	var lines:ArrayCollection = new ArrayCollection();
            	var cnt:Number = 0;
            	while (result != null) {
            		var po:Post = new Post();
            		po.bid = bid;
            		po.pid = result[1];
            		po.author = result[2];
            		lines.addItem(po);
					cnt++;
            		result = p.exec(content);
            	}
            	
            	for (var i:Number = 0; i < lines.length; i++) {
            		//ploaders.addItem(new PostLoader(lines.getItemAt(i) as Post, postList, i));
            		new PostLoader2(lines.getItemAt(i) as Post, postList, i);
            	}
            	
            	postList.dataProvider = lines;
            	
				
            }
            
			public function loadBoard(event:Event):void
            {
                var bname:String = (event.target as Tree).selectedItem as String;
                stream = new flash.net.URLStream();
                stream.load(new flash.net.URLRequest("http://www.newsmth.net/bbsdoc.php?board=" + bname));
                stream.addEventListener(flash.events.Event.COMPLETE, loadBoardCallback);
                stackLeft.selectedChild = vBoard;
                boardTree.width = 0;
                boardTree.visible = false;
            }
            
            public function loadSubject(event:GridEvent):void
            {
               	var url:String = "http://www.newsmth.net/bbstcon.php?board=" + event.currentTarget.selectedItem.bname +
                    "&gid=" + event.currentTarget.selectedItem.gid;
                stream = new flash.net.URLStream();
                stream.load(new flash.net.URLRequest(url));
                stream.addEventListener(flash.events.Event.COMPLETE, loadSubjectCallback);
                myViewStack.selectedChild = vSubject;
            }
            
            public function toggleBoardTree():void
            {
                boardTree.width = 150 - boardTree.width;
                boardTree.visible = !boardTree.visible;
            }
            
            
            public function login(id:String, pass:String):void
            {
                if (id == "guest") {
                    acBoard = new ArrayCollection(["Apple", "Children", "AutoWorld", "RealEstate", 
                "DigiHome", "OMTV", "TV", "TVGame", "ADAgent_TG"]);
                    boardTree.dataProvider = acBoard;
                    return;
                }
                var url:String = "http://www.newsmth.net/bbslogin.php?mainurl=atomic.php";
                //var url:String = "http://www.newsmth.net/static/www2-main.js";
                var request:URLRequest = new URLRequest(url);
                var data:URLVariables = new URLVariables();
                data.id = id;
                data.passwd = pass;
                data.kick_multi = 1;
                request.data = data;
                request.method = URLRequestMethod.POST;
                request.followRedirects = true;
                stream = new URLStream();
                stream.load(request);
                stream.addEventListener(Event.COMPLETE, loginCallback);
            }
            
            public function loginCallback(event:Event):void
            {
                var logintext:String = "Error";
                var content:String = stream.readMultiByte(stream.bytesAvailable, "gb2312");
                //Alert.show(content);
                if (content.indexOf("location.href") != -1) {
                    isLoggedIn = true;
                    if (!isFavorUpdated) updateFavor();
                }
                else {
                    isLoggedIn = false;
                }
                
                
            }
            
            public function updateFavor():void
            {
                var url:String = "http://www.newsmth.net/atomic.php";
                stream = new URLStream();
                stream.load(new URLRequest(url));
                stream.addEventListener(Event.COMPLETE, updateFavorCallback);
            }
            
            public function updateFavorCallback(event:Event):void
            {
                var content:String = stream.readMultiByte(stream.bytesAvailable, "gb2312");
                var p:RegExp = new RegExp("act=board&board=(\\w+)", "g");
                var result:Object = p.exec(content);
                acBoard = new ArrayCollection();
                while (result != null) {
                    acBoard.addItem(result[1]);
                    result = p.exec(content);
                }
                boardTree.dataProvider = acBoard;
                isFavorUpdated = true;
            }

	
        ]]> 
    </fx:Script> 
     
    <s:Panel title="Newsmth"
            width="100%" height="100%"
            horizontalCenter="0" verticalCenter="0">
    <s:HGroup left="5" top="5" right="5" bottom="5" height="100%">
        <s:VGroup width="400" height="100%">
            <s:HGroup>
                <s:Button label="Favor" click="toggleBoardTree()" />
                <s:Button label="Mail" />
                <s:TextInput id="tId" typicalText="123456789" />
                <s:TextInput id="tPass" displayAsPassword="true" typicalText="123456789" enter="login(tId.text, tPass.text)" />
                <s:Button label="Login" click="login(tId.text, tPass.text)" />
            </s:HGroup>
            <mx:ViewStack id="stackLeft" borderStyle="none" width="100%" height="100%"
            	creationPolicy="all">
                <mx:Canvas id="vBoard" width="100%" height="100%">
                <s:HGroup width="100%" height="100%">
                    <mx:Tree id="boardTree" dataProvider="{acBoard}" width="150" height="100%" change="loadBoard(event)" />
            	    <s:DataGrid id="threadList" width="100%" height="100%" 
				         gridClick="loadSubject(event)" >
                        <s:columns>
                            <s:ArrayCollection>
                                <s:GridColumn dataField="author" headerText="author" width="80" />
                                <s:GridColumn dataField="title" headerText="title" />
                            </s:ArrayCollection>
                        </s:columns>
				    </s:DataGrid>
                </s:HGroup>
                </mx:Canvas>
            </mx:ViewStack>
        </s:VGroup>
        
        <s:VGroup left="10" right="10" top="10" bottom="10" width="100%" height="100%">

            <s:HGroup>
                <s:Button id="btnSubject" label="Subject"
                    click="myViewStack.selectedChild = vSubject;"/>
            </s:HGroup>

            <!-- Define the ViewStack and the three child containers and have it
                    resize up to the size of the container for the buttons. -->
            <mx:ViewStack id="myViewStack" borderStyle="none" width="100%" height="100%"
            	creationPolicy="all">
                <mx:Canvas id="vSubject" backgroundColor="#CCFFFF" label="Customer Info" width="100%" height="100%">
                    <s:DataGrid id="postList" width="100%" height="100%" variableRowHeight="true">
                        <s:columns>
                            <s:ArrayCollection>
                                <s:GridColumn dataField="author" headerText="author" width="100" />
                                <s:GridColumn dataField="content" headerText="content" />
                            </s:ArrayCollection>
                        </s:columns>
                    </s:DataGrid>
                </mx:Canvas>
                <mx:Canvas id="accountInfo" backgroundColor="#FFCCFF" label="Account Info" width="100%" height="100%">
                    <mx:Label text="Account Info" color="#000000"/>
                </mx:Canvas>
            </mx:ViewStack>            
        </s:VGroup>
    </s:HGroup>
    </s:Panel>
    
</s:Application>