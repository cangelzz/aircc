<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    creationComplete="init()">
    <s:layout>
        <s:VerticalLayout paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="20"/>
    </s:layout>
        
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import com.airsmth.defines.*;
            import com.airsmth.views.*;
            import com.airsmth.renders.*;
            public var CurMail:MailFolderLoader;
            [Bindable]
            public var flags:ArrayCollection = new ArrayCollection([false, true, true]);
            
            [@Embed(source='../../../assets/mail_inbox.png')]
            [Bindable]
            public var icInbox:Class;

            [@Embed(source='../../../assets/mail_sent.png')]
            [Bindable]
            public var icSent:Class;
            
            [@Embed(source='../../../assets/trash.png')]
            [Bindable]
            public var icTrash:Class;

            
            protected function init():void {
                var mb:MailBox;
                if (data is MailFolderLoader) {
                    var ml:MailFolderLoader = data as MailFolderLoader;
                    mb = ml.box;
                    mailList.dataProvider = ml.data;
                    setPageUI(ml);
                    return;
                }
            
                
                if (data == null || data == "") {
                    mb = new MailBox();
                }
                else {
                    mb = data as MailBox;
                }
                loadMailbox(mb);
            }
            
            protected function setPageUI(ml:MailFolderLoader):void {
                if (ml.prev != null) mprevBtn.enabled = true; else mprevBtn.enabled = false;
                if (ml.next != null) mnextBtn.enabled = true; else mnextBtn.enabled = false;
                var mb:MailBox = ml.box;
                if (mb.path == MailBox.DIR) { flags = new ArrayCollection([false, true, true]); btnBox.setStyle("icon", icInbox); }
                if (mb.path == MailBox.SENT) { flags = new ArrayCollection([true, false, true]); btnBox.setStyle("icon", icSent) }
                if (mb.path == MailBox.DELETED) { flags = new ArrayCollection([true, true, false]); btnBox.setStyle("icon", icTrash) }
            }
            
            protected function loadMailbox(mb:MailBox):void {
                var ml:MailFolderLoader = new MailFolderLoader(mb);
                ml.addEventListener(LoadEvent.DONE, onLoad);
                ml.addEventListener(LoadEvent.LOADSTART, onLoadStart);
                ml.load();
            }
            
            protected function onLoadStart(event:Event):void {
                lbInfo.includeInLayout = true;
            }
            
            protected function onLoad(event:Event):void {
                lbInfo.includeInLayout = false;
                var ml:MailFolderLoader = event.currentTarget as MailFolderLoader;
                mailList.dataProvider = ml.data;
                setPageUI(ml);
                data = ml;
            }
            
            protected function go(start:String):void {
                var mb:MailBox = (data as MailFolderLoader).box;
                mb.start = start;
                loadMailbox(mb);
            }
            
            protected function prev():void {
                var ml:MailFolderLoader = data as MailFolderLoader;
                var mb:MailBox = ml.box;
                mb.start = ml.prev;
                loadMailbox(mb);
            }
            protected function next():void {
            var ml:MailFolderLoader = data as MailFolderLoader;
                var mb:MailBox = ml.box;
                mb.start = ml.next;
                loadMailbox(mb);
            }
            protected function last():void {
            var ml:MailFolderLoader = data as MailFolderLoader;
                var mb:MailBox = ml.box;
                mb.start = null;
                loadMailbox(mb);
            }
            
            protected function newMail():void {
                navigator.pushView(NewMailView);
            }
            
            protected function refresh():void {
                loadMailbox((data as MailFolderLoader).box);
            }
            
            protected function goBox(path:String):void {
                loadMailbox(new MailBox(path));
            }
            
        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:ArrayCollection id="data"/>
    </fx:Declarations>
    <s:navigationContent>
        <s:Button icon="@Embed(source='../../../assets/back.png')" click="navigator.popView()" />
        <s:Button icon="@Embed(source='../../../assets/prev_mail_page.png')" click="prev()" id="mprevBtn" enabled="false" />
        <s:Button icon="@Embed(source='../../../assets/next_mail_page.png')" click="next()" id="mnextBtn" enabled="false"/>
        <s:Button id="btnBox" click="refresh()" />
    </s:navigationContent>
    <s:actionContent>
        <s:Button icon="@Embed(source='../../../assets/refresh.png')" click="refresh()" id="refreshBtn" />
        <s:Button icon="@Embed(source='../../../assets/new_mail.png')" click="newMail()" id="newBtn" />
        <s:Button icon="@Embed(source='../../../assets/more.png')" click="parentApplication.viewMenuOpen = true" id="moreBtn" />
    </s:actionContent>
    <s:Label id="lbInfo" styleName="loading" text="正在加载，请稍候 ..." includeInLayout="false"/>
    <s:List id="mailList"
        width="100%" height="100%"
        change="navigator.pushView(MailView, mailList.selectedItem)"
        itemRendererFunction="RenderUtil.selectRenderer" />
    <s:viewMenuItems>
        <s:ViewMenuItem id="inboxBtn" click="goBox(MailBox.DIR)"
            icon="@Embed(source='../../../assets/mail_inbox.png')" enabled="{flags.getItemAt(0)}"/>
        <s:ViewMenuItem id="sentBtn" click="goBox(MailBox.SENT)"
            icon="@Embed(source='../../../assets/mail_sent.png')" enabled="{flags.getItemAt(1)}"/>
        <s:ViewMenuItem id="trashBtn" click="goBox(MailBox.DELETED)"
            icon="@Embed(source='../../../assets/trash.png')" enabled="{flags.getItemAt(2)}"/>
        <s:ViewMenuItem id="lastBtn" click="go(null)"
            icon="@Embed(source='../../../assets/last_mail_page.png')"/>
    </s:viewMenuItems>
</s:View>